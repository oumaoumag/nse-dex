---
description: 
globs: 
alwaysApply: true
---

Cursor IDE Coding Guidelines

    Leverage Existing Code

        Reuse and Build On: Always start by reviewing the existing codebase to understand available functions and modules before writing new code.

        Extension Over Reinvention: Extend existing features where applicable instead of writing new code that duplicates functionality.

    Maintain Clean and Organized Code

        Avoid Spaghetti Code: Write code that is modular, well-organized, and easy to follow. Structure your code using functions, classes, and modules to ensure separation of concerns.

        Enforce Consistent Formatting: Adhere to a consistent style guide (e.g., proper indentation, spacing, and naming conventions) to improve readability.

    Prevent Duplication

        No Duplicate Code: Do not write duplicate code blocks. When similar functionality is needed in multiple places, abstract it into a reusable function or module.

        Eliminate Redundancy: Identify and remove redundant functions. If a function is performing similar tasks to another, consider merging or refactoring them.

    Emphasize Good Practices

        Code Reviews and Best Practices: Regularly review your code against established best practices. Use available linting and code analysis tools to help identify issues.

        Refactoring: Continuously refactor code to simplify complex logic, improve maintainability, and adapt to evolving project requirements.

    Write Purposeful Comments

        Minimal and Meaningful: Include comments only when necessary to clarify complex logic or intent. Avoid cluttering the code with unnecessary or redundant comments.

        Self-Documenting Code: Strive to write clear and self-explanatory code that minimizes the need for excessive commenting.

    Adopt a Testing Mindset

        Unit Testing: Write tests for new features and functions to ensure code correctness and to facilitate future refactoring.

        Continuous Integration: Where possible, integrate automated testing tools to catch issues early in the development cycle.

    Follow Version Control Best Practices

        Meaningful Commits: Make frequent, well-documented commits that clearly describe the changes and reasons behind them.

        Branching Strategy: Use a consistent branching model to organize development and manage feature integration efficiently.

    Optimize Performance and Maintainability

        Efficient Code: Write code that is both performant and scalable, avoiding unnecessary computations and resource-intensive operations.

        Documentation: Maintain clear external documentation for modules and functions to aid future developers and ease the onboarding process.